package main

import (
	"sort"
	"strings"
)

/*
Написать функцию поиска всех множеств анаграмм по словарю.

Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Требования:
Входные данные для функции: ссылка на массив,
каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: ссылка на мапу множеств анаграмм
Ключ - первое встретившееся в словаре слово из множества.
Значение - ссылка на массив, каждый элемент которого,
слово из множества.
Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.
*/

// Функция для поиска анаграмм в массиве. На вход принимает ссылку на массив анаграмм.
// Отдает ссылку на мап множетсв анаграмм, где ключ 1 встреченное слово в словаре.
func anagramSearch(inputArray *[]string) *map[string]*[]string {
	//Инициализируем мап для сохранения результатов поиска.
	anagrams := make(map[string]*[]string, len(*inputArray)/2)
	//Если словарь состоит менее чем из 2 слов, возвращаем пустую мап.
	if len(*inputArray) < 2 {
		return &anagrams
	}
	//Инициализируем мап для хранения результатов сортировки
	//слов словаря.
	m := make(map[string][]string, len(*inputArray))
	//Проходим циклом по всем элементам массива,
	//приводим все к нижнему регистру,
	//и сортируем слова по возрастанию.
	for _, word := range *inputArray {
		loWord := strings.ToLower(word)
		sortedWord := sortWord(loWord)
		m[sortedWord] = append(m[sortedWord], loWord)
	}

	var key string
	//Проходим циклом по заполненной мап,
	//если массив значений состоит из 1 слова,
	//то игнорируем этот массив.
	for _, v := range m {
		if len(v) == 1 {
			continue
		}
		//Ключом в мап анаграмм является 1 элемент массива.
		key = v[0]
		//Сортируем оставшиеся элементы по возрастанию.
		p := v[1:]
		sort.Slice(p, func(i, j int) bool {
			return p[i] < p[j]
		})
		anagrams[key] = &p
	}
	return &anagrams
}

// Вспомогательная функция для сортировки слова в словаре.
func sortWord(word string) string {
	r := []rune(word)
	sort.Slice(r, func(i, j int) bool {
		return r[i] < r[j]
	})
	return string(r)
}
