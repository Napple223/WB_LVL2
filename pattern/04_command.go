package pattern

/*
Реализовать паттерн «команда».
Объяснить применимость паттерна, его плюсы и минусы,
а также реальные примеры использования данного примера на практике.
https://en.wikipedia.org/wiki/Command_pattern

Команда — это поведенческий паттерн проектирования,
который превращает запросы в объекты, позволяя передавать
их как аргументы при вызове методов, ставить запросы в очередь,
логировать их, а также поддерживать отмену операций.

Применяемость:
1. Когда возникает необходимость параметризовать объекты выполняемым действием.
2.  Когда вы хотите ставить операции в очередь,
выполнять их по расписанию или передавать по сети.
3. Когда нужна операция отмены.

Преимущества:
1. Убирает прямую зависимость между объектами,
вызывающими операции, и объектами, которые их непосредственно выполняют.
2. Позволяет реализовать простую отмену и повтор операций.
3. Позволяет реализовать отложенный запуск операций.
4. Позволяет собирать сложные команды из простых.
5. Реализует принцип открытости/закрытости.

Недостатки:
1. Усложняет код программы из-за введения множества дополнительных классов.
*/

//Мой пример:
//Допустим у нас есть автомобиль. Мы можем завести его с пульта сигнализации,
//а можем из самого автомобиля.

//Интерфейс команды, имеющий только 1 метод - выполнить.
type command interface {
	execute()
}

//Структура ключа - инициализатора действий.
type key struct {
	command command
}

//Метод нажать кнопку, вызывающий метод команды.
func (k *key) press() {
	k.command.execute()
}

//Интерфейс получателя команды, имеет конкретные методы.
type vehicle interface {
	turnEngineOn()
	turnEngineOff()
}

//Объект конкретной команды.
type turnOnComm struct {
	vehicle vehicle
}

//Метод команды, определяющий инструкции по выполнению команды.
func (on *turnOnComm) execute() {
	on.vehicle.turnEngineOn()
}

//Объект конкретной команды.
type turnOffComm struct {
	vehicle vehicle
}

//Метод команды, определяющий инструкции по выполнению команды.
func (off *turnOffComm) execute() {
	off.vehicle.turnEngineOff()
}

//Структура получателя команд.
type suv struct {
	engineIsStarted bool
}

//Методы получателя команд.
func (s *suv) turnEngineOn() {
	s.engineIsStarted = true
}

func (s *suv) turnEngineOff() {
	s.engineIsStarted = false
}

func testCommand() {
	//Инициализируем исполнителя команд.
	suv := &suv{}
	//Передаем командам исполнителя.
	turnOnComm := &turnOnComm{suv}
	turnOffComm := &turnOffComm{suv}

	//Передаем инициализатору необходимые команды.
	keyOnButton := &key{turnOnComm}
	keyOffButton := &key{turnOffComm}

	//Объект, инициализирующий выполнение команд
	//изолирован от объекта, выполняющего команды,
	//так как они работают через команды - прослойки.
	keyOnButton.press()
	keyOffButton.press()
}
